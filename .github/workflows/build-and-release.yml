name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: cfddns
  DOCKER_REPO: lhaig/cfddns
  GO_VERSION: '1.24'

jobs:
  build:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
        include:
          - goos: linux
            goarch: arm
            goarm: 7

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get version from git tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            SHA=$(git rev-parse --short HEAD)
            echo "VERSION=dev-${SHA}" >> $GITHUB_OUTPUT
            echo "RELEASE_VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          EXTENSION=""
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            EXTENSION=".exe"
          fi
          OUTPUT="${{ env.BINARY_NAME }}_${{ steps.get_version.outputs.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}${EXTENSION}"
          go build -ldflags "-X main.version=${{ steps.get_version.outputs.VERSION }}" -o ${OUTPUT} ./cmd/main.go
          if [[ "${{ matrix.goos }}" == "linux" ]]; then
            tar -czf "${OUTPUT}.tar.gz" "${OUTPUT}"
            echo "ASSET=${OUTPUT}.tar.gz" >> $GITHUB_ENV
          elif [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip "${OUTPUT}.zip" "${OUTPUT}"
            echo "ASSET=${OUTPUT}.zip" >> $GITHUB_ENV
          else
            tar -czf "${OUTPUT}.tar.gz" "${OUTPUT}"
            echo "ASSET=${OUTPUT}.tar.gz" >> $GITHUB_ENV
          fi
          echo "Created archive: ${{ env.ASSET }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}_${{ matrix.goos }}_${{ matrix.goarch }}
          path: ${{ env.ASSET }}
          retention-days: 5

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: go test -v ./...

  release:
    name: Create GitHub Release
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: find . -type f

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: ./*/*

  docker:
    name: Build and Push Docker Images
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPO }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}